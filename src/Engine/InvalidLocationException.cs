using System;
using System.Runtime.Serialization;
using System.Text;

namespace Dgt.Minesweeper.Engine
{
    [Serializable]
    public class InvalidLocationException : Exception
    {
        private const string DefaultMessage = "The Location does not exist in the Minefield.";

        #region Recommended constructors
        
        // I'm not sure if I want to keep these. This exception doesn't really make sense without the location, the
        // number of rows, and the number of columns. However, Microsoft best practices recommend having these, and
        // they are based off code that is generated by Visual Studio when generating a custom exception class.
        //
        // See https://docs.microsoft.com/en-us/dotnet/standard/exceptions/best-practices-for-exceptions
        // See https://docs.microsoft.com/en-us/dotnet/standard/exceptions/how-to-create-user-defined-exceptions

        public InvalidLocationException()
            : this(DefaultMessage)
        {
        }

        public InvalidLocationException(string message)
            : base(message)
        {
        }

        public InvalidLocationException(string message, Exception innerException)
            : base(message, innerException)
        {
        }
        
        protected InvalidLocationException(SerializationInfo info, StreamingContext context)
            : base(info, context)
        {
        }
        
        #endregion

        public InvalidLocationException(Location location, int numberOfColumnsAndRows)
            : this(location, numberOfColumnsAndRows, numberOfColumnsAndRows)
        {
        }

        public InvalidLocationException(Location location, int numberOfColumns, int numberOfRows)
            : this(CreateMessage(location, numberOfColumns, numberOfRows))
        {
            Location = location;
            MaximumColumnName = (ColumnName)numberOfColumns;
            MaximumRowIndex = numberOfRows;
        }

        public Location? Location { get; }
        public ColumnName? MaximumColumnName { get; }
        public int? MaximumRowIndex { get; }

        private static string CreateMessage(Location location, int numberOfColumns, int numberOfRows)
        {
            var builder = new StringBuilder(DefaultMessage);

            if (location.ColumnIndex > numberOfColumns)
            {
                builder.Append(" The column is out of bounds.");
                builder.Append($" The column must be between \"{(string)(ColumnName)1}\"");
                builder.Append($" and \"{(string)(ColumnName)numberOfColumns}\",");
                builder.Append($" but found \"{(string)location.ColumnName}\".");
            }

            if (location.RowIndex > numberOfRows)
            {
                builder.Append(" The row is out of bounds.");
                builder.Append($" The row must be between {1} and {numberOfRows}, but found {location.RowIndex}.");
            }

            return builder.ToString();
        }
    }
}